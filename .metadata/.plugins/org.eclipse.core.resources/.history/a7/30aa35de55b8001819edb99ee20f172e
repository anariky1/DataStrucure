package ds.doublylinkedlist;

public class doublyLinkedList_Practise {
	
	private Node first;
	private Node last;
	
	public doublyLinkedList_Practise(){
		first=null;
		last=null;
	}
	
	private boolean isEmpty() {
		// TODO Auto-generated method stub
		return (first==null);
	}
	
	public void insertFirst(int data){
       Node newNode= new Node();
       newNode.data=data;
       
       if(isEmpty()){
    	   last=newNode;
       }else{
    	   first.previous=newNode;
       }
       
       newNode.next=first;
       first=newNode;

	}
	
	
	public void insertLast(int data){
		Node newNode= new Node();
	       newNode.data=data;
	       
	       if(isEmpty()){
	    	   first=newNode;
	       }else{
	    	   last.next=newNode;
               last=newNode.previous;
               
	       }
	       
	       last=newNode;
	       

	       
		
	}
	
	
	
	
	
	
	
	
	
	
	public void displayForward(){
		 System.out.print("List(first-->last):");
		 Node current=first;
		 while(current!=null){
			 current.displayNode();
			 current=current.next;
		 }
		 System.out.println();
	 }
	 
	 public void displayBackward(){
		 System.out.print("List(last-->first):");
		 Node current=last;
		 while(current!=null){
			 current.displayNode();
			 current=current.previous;
		 }
		 System.out.println();
	 }



}
